Consider the following argument written in english:

If it is raining then the ground is wet.
It is raining.
----------------------------------------
Therefore, the ground is wet.

This argument can be symbolized using letters to replace each proposition:

P->Q. P C: Q

where P is 'that is is raining' and Q is 'that the ground is wet'.

We can show the logical validity of this argument using a derivation.
Each derivation begins with a 'Show' statement, so first we can either
type 'Show Q' or 'Show C' to indicate that we are about to prove
the conclusion. 



Now that we have our 'Show' statment, we can begin deriving it.
There are three ways that you can derive a conclusion:

Direct Derivation (DD)
Indirect Derivation (ID)
Conditional Derivation (CD)

Since this argument is so simple, it suffices to use DD to derive Q.
To do this, all we need to do is produce Q and then instantiate the DD Rule.

We currently have two premises to work with: P->Q and P.
We currently only have 1 rule at our disposal: Modus Ponens (MP)

Modus Ponens is the most foundational logical rule. It states that
if I have P->Q and I have P, then I have Q. So to derive Q all I need
is one instantiation of MP. To do this I can type the command
'MP PR1 PR2' or 'MP PR2 PR1'
This will indicate that I intend to use MP rule on the first and second
premises of the argument. Go ahead and try this command.

PR1: P->Q PR2: P C: Q
Show Q



As you can see, the instantiation of the MP rule gives us Q. This also happens
to be the exact proposition that we are attemping to derive.

To finish the derivation, we simply have to state that we have solved this 
through direct derivation by inputting the DD command. So let's finish the
derivation by typing 'DD 0'.

PR1: P->Q PR2: P C: Q
Show Q
0: Q 



Congratulations, you have solved your first derivation. Direct derivations like
these are just one way to show the validity of an argument. There is also
indirect derivations (ID) and conditional derivations (CD) which will be covered
in the next few tutorials. Before moving on, you can try to practice DD more on
the 'Working with Conditionals' problem set. See how many you can solve by just
using DD and the simplest rules of MP and MT. For more info on MT, type 'help'
while you are solving a derivation to view documentation for all of the available
rules.

Tutorial 2 (Indirect Derivations)

Sometimes we cannot show the conclusion by a direct derivation. Consider the
following argument:

R->Q. R->~Q C: ~R

Let us first perform our usual 'Show C' or 'Show ~R' command to get started.


So as we can see, if we try to perform a rule such as MP or MT right now, we will
get nowhere because all that we have currently is two conditional premises with
no atomics. In order to get something that we can work with, we must 'Assume' something.
Think about an Assume statement as saying "assume for the sake of the argument". 
Of course, you can't just assume anything, you have to assume something that will
result in a productive logical outcome. So if I want to show ~R, a good assume
statement is to assume R, and then show a contradiction when R exists, proving
that ~R must be the case instead. 

For example, if I wanted to prove that my cat was alive I could say something like
"well let us assume that the cat is dead. If so, the cat would not be breathing.
The cat is breathing. Since the cat cannot be breathing and not breathing, the cat
must be alive."

Let's see how we can use the same form of argument symbolically. Try typing the 
command 'ASS ID' which stands for 'Assume Indirect Derivation':


The 'ASS ID' command in this case yeilds us 'R' which we can now use to find a 
contradiction, which will allow us to finish the ID, and solve the derivation.

Now go ahead and attempt to solve the derivation by using MP or MT rules. Once
you have two contradicting premises, just use the command ID [Premise] [Premise]
to finish the deivation.


Solved!

Congratulations! You have successfully solved your first indirect derivation.
ID is extemely useful when getting into harder and more complex dervations. 
Go ahead and try using the 'ASS ID' command to solve more derivation from
the first problem set, or go on to the next tutorial where you can learn about
conditional derivations, and using nested Show statements.



Tutorial 3: Conditional Derivations and Nested Show Statements

In this tutorial you will learn about the third and final type of derivation,
the conditional derivation (CD). CD is used when the conclusion that you are
trying to show is a conditional, and the easiest way to solve it is to first
assume the anticedent and then prove the consequent using the anticedent.

So for instance if I wanted to argue something like 'if my cat is breathing then
it is alive' I might prove this by saying "Let's assume that my cat is breathing.
If something is breathing then it has a heart-beat. If something has a heart-beat,
then it must be alive. Therefore, Assuming that my cat is breathing, it must have
a heart-beat, and if it has a heart-beat it must be alive. So if my cat is
breathing then it is alive."

The above argument can be symbolized as follows:

P->R R->Q C: P->Q

Let us start with our usual Show statment to get started with this derivation.


Now let's assume the anticedent of the conclusion by using the command 'ASS CD'


This command yeilds P, so the rest is pretty easy at this point. Go ahead and
employ Modus Ponens until you get Q, and then use the CD [Premise] command to 
solve the derivation.


Congrats! that's how you perform a very simple conditional derivation. What you
will also encounter are derivations that require you to show a different premise
from your conclusion within the derivation in order to show the initial
conclusion. In these situations it is required that you use a show statement 
which is nested within the previous show statement.
A good example of this kind of situation is with the following argument:

~(P->Q)->Q C: P->Q

When we Show C and then ASS CD in this derivation, we are left with P, but as
you can see, P is useless to the one premise that we have here. So in this case,
we have to use a nested Show. We are going to have to prove Q in a separate Show
statement before we can use the CD command. Enter 'Show Q', and you will see that
the 'Show' statement will change to Q instead of P->Q. You can use one assume
statement per show statement, so it might be best to use ASS ID when showing Q. 
Once you have solved for Q you will be given Q as a premise to use and be back 
to Show P->Q, it is then just a matter of using the CD command on Q.

Remember that in addition to MP and MT you also have DN [Premise] rules which allow 
you to add and remove double negations. This will also come in handy in this
derivation.

So start by typing Show Q and go from there.


Congratulations!

Now you know how to perform conditional derivations and nested show statements. If
you completed the previous two tutorials then you have all the tools that you need
to complete the rest of the problems in sentential logic. Every derivation can be
solved by using either a direct, indirect, or conditional derivation. Remember to
use nested show statements, and remember to look at the help file for more rules
that deal with the other operators like AND(^), OR(v), and the biconditional(<->).

Some of the rules need to be derived before they can be used. You can unlock these
rules by deriving them in the theorem problem sets. Good luck and have fun! Come 
back when you are ready to learn about predicate logic.
