Show Statements
A Show statement is used to initualize a derivation by stating the conclusion
that you are going to derive. Show statements can also be used within the 
derivation of another statement when one is unable to proceed in another
way. 
Example:
Q->(~R). ~P->R C: ~P->~Q
0: Show ~P->~Q
1: ASS CD: ~P
2:  Show ~Q
3:  ASS ID: Q
4:  MP PR1 3: ~R
5:  MP 1 PR2: R
6:  ID 4 5: ~Q
7: CD 6
Command: Show [Premise]
Show C (to automatically show argument conclusion)


# Modes of Derivation #

Direct Derivation
A direct derivation command is invoked once you have the premise that you are
intending to derive.
Example:
P->Q P C:Q
Show Q
MP PR1 PR2: Q
DD Q
Command: DD [Premise]

Assume Indirect Derivation
Assume ID is a logical rule for showing a premise in which you can first
assume the negation of the premise that you are trying to show and then
show a logical contradiction while the premise is assumed.
English example argument: If it is raining then the ground is wet. It is
raining. Therefore the ground is wet. 
If I assume ID, I have the proposition: The ground is not wet.
If I use Modus Ponens below then I can use it to say that the ground is wet.
Since the ground cannot be wet and not wet then this is a contradiction.
If I symbolize this into P->Q. P C:Q I can make the following derivation
using ASS ID
Show Q
ASS ID: ~Q
MP PR1 PR2: Q
ID ~Q Q
Command: ASS ID
ID [Premise]

Assume Conditional Derivation
Conditional derivation is used when the conclusion that you are trying to
show is a conditional, and a DD or ID will not work. You can type ASS CD to
get an instantiation of the anticedent to the conditional, and then you must
show the consequent.
Example:
P->R. R->Q. C: P->Q
0: Show P->Q
1: ASS CD: P
2: MP 1 PR1: R
3: MP 2 PR2: Q
4: CD 3
Command: ASS CD
CD [Premise]


# Foundational Logical Rules #

Modus Ponens
Modus Ponens is one of the most basic rules of logic. It is invoked when 
one has a conditional statement and the antecedent to that statement. 
Example english argument: If it is raining outside then the ground is wet. It 
is raining outside. Therefore the ground is wet. 
We can symbolize the above english such that "It is raining outside" is
represented by 'P' and "the ground is wet" is prepresented by 'Q'.
We can then symbolize the argument as P->Q. P C:Q
Command: MP [Premise] [Premise]

Modus Tollens
Modus Tollens is another fundamental logical rule which basically works
in the opposite direction to Modus Ponens. In this case you have a 
biconditional and a negations of its consequent. You can invoke Modus
Tollens to yeild the negation of the anticedent.
Example english argument: If it is raining outside then the ground is wet. The
ground is not wet. Therefore it is not raining outside. 
like the above Modus Ponens example we can symbolize it as follows:
P->Q ~Q C:~P
Command: MT [Premise] [Premise]

Double Negation
The double negation rule is a useful logical rule for derivations as it allows
one to set up for a Modus Tollens or to get rid of unneeded negation symbols
in front of a premise. It simply works by either having a statement that is
double negated and taking off the negation by invoking DNE or adding a double
negation to a non-negated premise by invoking DNI.
Example english argument: The cat is black. Therefore it is not the case that
the cat is not black.
Or we can say: It is not the case that the cat is not black. Therefore, the
cat is black.
If we symbolize "The cat is black" as 'P' we get P C:~~P or ~~P C:P
Command:DNE [Premise] where the premise has a double negation
DNI [Premise]
DN [Premise]

Simplification
Simplification rule states that if I have a conjunction of propositions, then I
can derive an instantiation of either one of those propositions on their own 
from that premise. 
Example english argument: My cat is black and my cat has eyes. Therefore, my cat
is black.
Or we can say: My cat is black and my cat has eyes. Therefore, my cat has eyes.
Symbolically it just means that if I have P^Q then I can have P and I can have 
Q separately.
Command: SL [Premise] - gives you the left instantiation
SR [Premise] - gives you the right instantiation
S [Premise] - gives you a separate instantiation of both

Adjunction
Asjunction is just the opposite of simplification. It states that if you have
a separate instantiation of P and a separate instantiation of Q then you can have
a premise of P^Q.
Example english argument: My cat has eyes. My cat is black. Therefore, my cat has
eyes and my cat is black.
Symbolically: P. Q. C: P^Q
Command: Adj [Premise] [Premise]

Addition
Addition allows one to turn any single premise into a disjunction (OR operator).
This is extremely useful if say I have P and a premise PvR->Q. If I want to derive
Q here, then I am going to need PvR so I can use addition to accomplish this by
adding R to P. 
Example english argument: My cat has eyes. Therefore, my cat has eyes or the sun
is made of yellow toothpaste. (Notice that it doesn't matter what the additional
proposition is because all you are stating is that one or the other is true.)
Symbolically: P. C: PvR
Command: AddL [Premise] - adds new premise to left of the operator
AddR [Premise] - adds new premise to the right of the operator
Add [Premise] - adds new premise to the right of the operator

Modus Tollendo Ponens
MTP allows one to use a negated premise to instantiation a non-negated premise from
a disjunction. So take a look at the below example:
Example english argument: My cat has eyes, or the sun is made of yellow toothpaste.
The sun is not made of yellow toothpaste. Therefore my cat has eyes. 
Symbolically: ~Q. PvQ C: P 
or you can say: ~P. PvQ C: Q
Command: MTPR [Premise] [Premise] - instantiates the rigth side of the operator
MTPL [Premise] [Premise] - instantiates the left side of the operator
MTP [Premise] [Premise] - generates whatever side necessarily works

Biconditional-Conditional
BC allows one to break apart a biconditional into both of its conditional parts. So
if I have a biconditional P<->Q, it necessarily contains the conditional premises
P->Q and Q->P, so the BC command instantiates these premises.
Example english argument: My shoes get wet if and only if they come in contact with
water. Therefore, my shoes get wet only if they come in contact with water.
Symbolically: P<->Q. C: P->Q
Command: BCL [Premise] - instantiates conditional with left premise as anticedent (P->Q)
BCR [Premise] - instantiates conditional with left premise as anticedent (Q->P)
BC [Premise] - instantiates both conditionals

Conditional-Biconditional
CB is just the opposite of BC. It allows for one to create a biconditional out of
two conditional statements whose anticedents match consequents. So if I have a 
premise P->Q and another premise Q->P, I can use CB to combine them into P<->Q.
This will become very useful when deriving conclusion that are biconditionals.
You simply need to show one side of the biconditional, then show the other side,
CB them and you have a direct derivation (see above or tutorials).
Example english argument: The sun will rise tomorrow only if the earth is spinning.
The earth is spinning only if the sun will rise tomorrow. Therefore, the sun will
rise tomorrow if and only if the earth is spinning.
Symbolically: P->Q. Q->P C: P<->Q
Command: CB [Premise] [Premise]


# Derived Rules #

Material Conditional
The Material Conditional rule allows one to create a conditional from any 
proposition. There are two material conditional rules. The first states that if 
I have a proposition such as P, then I can state Q->P where Q can be any 
proposition. 
The second and opposing rule is that if I have a negated proposition such as ~P
then I can state P->Q where Q is any new proposition, and P is the negation of
~P. This rule works simply because one can prove the rule by deriving the two
following theorems:
C: P->(Q->P) (Problem set 2, Derivation 1)
C: ~P->(P->Q) (Problem set 2, Derivation 17)
Command: MC1 [Premise]
MC2 [Premise]
MC [Premise] (will automatically choose MC1 or MC2) 