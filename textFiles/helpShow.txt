Show Statements
A Show statement is used to initualize a derivation by stating the conclusion
that you are going to derive. Show statements can also be used within the 
derivation of another statement when one is unable to proceed in another
way. 
Example:
Q->(~R). ~P->R C: ~P->~Q
0: Show ~P->~Q
1: ASS CD: ~P
2:  Show ~Q
3:  ASS ID: Q
4:  MP PR1 3: ~R
5:  MP 1 PR2: R
6:  ID 4 5: ~Q
7: CD 6
Command: Show [Premise]
Show C (to automatically show argument conclusion)

Direct Derivation
A direct derivation command is invoked once you have the premise that you are
intending to derive.
Example:
P->Q P C:Q
Show Q
MP PR1 PR2: Q
DD Q
Command: DD [Premise]

Assume Indirect Derivation
Assume ID is a logical rule for showing a premise in which you can first
assume the negation of the premise that you are trying to show and then
show a logical contradiction while the premise is assumed.
English example argument: If it is raining then the ground is wet. It is
raining. Therefore the ground is wet. 
If I assume ID, I have the proposition: The ground is not wet.
If I use Modus Ponens below then I can use it to say that the ground is wet.
Since the ground cannot be wet and not wet then this is a contradiction.
If I symbolize this into P->Q. P C:Q I can make the following derivation
using ASS ID
Show Q
ASS ID: ~Q
MP PR1 PR2: Q
ID ~Q Q
Command: ASS ID
ID [Premise]

Assume Conditional Derivation
Conditional derivation is used when the conclusion that you are trying to
show is a conditional, and a DD or ID will not work. You can type ASS CD to
get an instantiation of the anticedent to the conditional, and then you must
show the consequent.
Example:
P->R. R->Q. C: P->Q
0: Show P->Q
1: ASS CD: P
2: MP 1 PR1: R
3: MP 2 PR2: Q
4: CD 3
Command: ASS CD
CD [Premise]


Modus Ponens
Modus Ponens is one of the most basic rules of logic. It is invoked when 
one has a conditional statement and the antecedent to that statement. 
Example english argument: If it is raining outside then the ground is wet. It 
is raining outside. Therefore the ground is wet. 
We can symbolize the above english such that "It is raining outside" is
represented by 'P' and "the ground is wet" is prepresented by 'Q'.
We can then symbolize the argument as P->Q. P C:Q
Command: MP [Premise] [Premise]

Modus Tollens
Modus Tollens is another fundamental logical rule which basically works
in the opposite direction to Modus Ponens. In this case you have a 
biconditional and a negations of its consequent. You can invoke Modus
Tollens to yeild the negation of the anticedent.
Example english argument: If it is raining outside then the ground is wet. The
ground is not wet. Therefore it is not raining outside. 
like the above Modus Ponens example we can symbolize it as follows:
P->Q ~Q C:~P
Command: MT [Premise] [Premise]

Double Negation
The double negation rule is a useful logical rule for derivations as it allows
one to set up for a Modus Tollens or to get rid of unneeded negation symbols
in front of a premise. It simply works by either having a statement that is
double negated and taking off the negation by invoking DNE or adding a double
negation to a non-negated premise by invoking DNI.
Example english argument: The cat is black. Therefore it is not the case that
the cat is not black.
Or we can say: It is not the case that the cat is not black. Therefore, the
cat is black.
If we symbolize "The cat is black" as 'P' we get P C:~~P or ~~P C:P
Command:DNE [Premise] where the premise has a double negation
DNI [Premise]
DN [Premise]

